//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer $Globals
{
    float3  box_vertices[8] = { -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1 };// Offset:    0, size:  124
    float3  box_normals[6] = { 0, 1, 0, 0, -1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, -1 };// Offset:  128, size:   92
    float3  box_normals2[8] = { -0.577350259, 0.577350259, 0.577350259, 0.577350259, 0.577350259, 0.577350259, 0.577350259, -0.577350259, 0.577350259, -0.577350259, -0.577350259, 0.577350259, 0.577350259, 0.577350259, -0.577350259, -0.577350259, 0.577350259, -0.577350259, -0.577350259, -0.577350259, -0.577350259, 0.577350259, -0.577350259, -0.577350259 };// Offset:  224, size:  124
    uint    box_indices[24] = { 6, 5, 7, 4, 5, 0, 4, 1, 4, 1, 7, 2, 1, 0, 2, 3, 2, 3, 7, 6, 3, 0, 6, 5 };// Offset:  352, size:  372
    float3  groove[9] = { 0.378326386, 0.426042497, 0.450458705, 0.288781285, 0.358680308, 0.414705306, 0.0379029997, 0.0295215994, 0.00985669997, -0.103302799, -0.103169002, -0.0884924009, -0.0621749982, -0.0554432012, -0.0396778993, 0.00778200012, -0.0148312002, -0.0471301004, -0.0935560986, -0.125425994, -0.152562901, -0.0572702996, -0.0502192006, -0.0363410003, 0.0203348007, -0.00442009978, -0.0452179983 };// Offset:  736, size:  140
    float3  beach[9] = { 0.684114814, 0.692900419, 0.7069543, 0.317335486, 0.369440705, 0.440683901, -0.174719304, -0.173715398, -0.165741995, -0.449646711, -0.415518403, -0.341657311, -0.169020206, -0.170302197, -0.152586997, -0.0837808028, -0.0940454006, -0.102751799, -0.0319669992, -0.0214051008, -0.0147690997, 0.164181605, 0.137755796, 0.101040304, 0.369718909, 0.309792995, 0.202992305 };// Offset:  880, size:  140
    float3  tomb[9] = { 1.03516042, 0.760354877, 0.707463503, 0.444215, 0.343040198, 0.340377688, -0.224779695, -0.182851702, -0.1705181, 0.71104002, 0.542316914, 0.558795571, 0.643045187, 0.497145414, 0.515635729, -0.1150112, -0.0936603025, -0.0839286968, -0.374248713, -0.275596201, -0.287501693, -0.169495404, -0.134309605, -0.133531496, 0.55152601, 0.422217906, 0.416248798 };// Offset: 1024, size:  140
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
    float3  gEmitPosW;                  // Offset:   16, size:   12
    float3  gEmitDirW;                  // Offset:   32, size:   12
    float   gGameTime;                  // Offset:   44, size:    4
    float   gTimeStep;                  // Offset:   48, size:    4
    float4x4 gViewProj;                 // Offset:   64, size:   64
}

cbuffer cbFixed
{
    float3  gAccelW = { 0 };            // Offset:    0, size:   12
    float2  gQuadTexC[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   16, size:   56
}

//
// 7 local object(s)
//
Texture2DArray gTexArray;
Texture1D gRandomTex;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(15);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float3 gEyePosW;                   // Offset:    0 Size:    12 [unused]
        //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
        //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
        //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
        //   float gTimeStep;                   // Offset:   48 Size:     4
        //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // POSITION                 0   xyz         0     NONE  float   xyz 
        // AGE                      0      w        0     NONE  float      w
        // TYPE                     0   x           1     NONE   uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // m0:POSITION              0   xyz         0     NONE  float   xyz 
        // m0:AGE                   0      w        0     NONE  float      w
        // m0:TYPE                  0   x           1     NONE   uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[4], immediateIndexed
        dcl_input v[1][0].xyz
        dcl_input v[1][0].w
        dcl_input v[1][1].x
        dcl_temps 1
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o0.w
        dcl_output o1.x
        dcl_maxout 1
        
        #line 124 "D:\Code\honours-project\Code\Voxel Engine\ParticleSystem - VS 2012 (Base Version - Lighting)\FX\Rain.fx"
        add r0.x, cb0[3].x, v[0][0].w  // gin<3:Inf>
        mov o0.xyz, v[0][0].xyzx  // ptStream<0,0,0>
        mov o0.w, r0.x  // ptStream<0>
        mov o1.x, v[0][1].x  // ptStream<0>
        emit_stream m0
        
        #line 121
        ret 
        // Approximately 6 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; AGE.x; TYPE.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 StreamOutTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // AGE                      0   x           1     NONE  float   x   
                // TYPE                     0   x           2     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // AGE                      0      w        0     NONE  float      w
                // TYPE                     0   x           1     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.x
                dcl_input v2.x
                dcl_output o0.xyz
                dcl_output o0.w
                dcl_output o1.x
                
                #line 112 "D:\Code\honours-project\Code\Voxel Engine\ParticleSystem - VS 2012 (Base Version - Lighting)\FX\Rain.fx"
                mov o0.xyz, v0.xyzx  // StreamOutVS<0,1,2>
                mov o0.w, v1.x  // StreamOutVS<3>
                mov o1.x, v2.x  // StreamOutVS<4>
                ret 
                // Approximately 4 instruction slots used
                            
            };
            GeometryShader = gsStreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 DrawTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccelW;                    // Offset:    0 Size:    12
                //      = 0x00000000 0x00000000 0x00000000 
                //   float2 gQuadTexC[4];               // Offset:   16 Size:    56 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // AGE                      0   x           1     NONE  float   x   
                // TYPE                     0   x           2     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TYPE                     0   x           2     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.x
                dcl_input v2.x
                dcl_output o0.xyz
                dcl_output o1.xyzw
                dcl_output o2.x
                dcl_temps 2
                
                #line 169 "D:\Code\honours-project\Code\Voxel Engine\ParticleSystem - VS 2012 (Base Version - Lighting)\FX\Rain.fx"
                mov r0.x, v1.x  // t<0>
                mul r0.y, r0.x, l(0.100000)
                mul r0.y, r0.x, r0.y
                mul r0.y, r0.y, cb0[0].y
                div r0.y, r0.y, l(2.000000)
                add r0.y, r0.y, v0.y  // vAcc<1:NaN:Inf>
                
                #line 174
                div r0.x, r0.x, l(8.000000)
                add r0.x, r0.x, l(-0.000000)
                mul r0.x, r0.x, l(1.000000)
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r0.z, r0.x, l(-2.000000)
                add r0.z, r0.z, l(3.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.z
                mov r0.x, -r0.x
                add r1.w, r0.x, l(1.000000)  // opacity<0:[-2f,1f]>
                
                #line 181
                mul r0.x, r0.y, l(1.000000)
                div r0.x, r0.x, l(255.000000)  // z<0:NaN:Inf>
                mov r0.x, r0.x  // y<0:NaN:Inf>
                mov r0.y, r0.x  // x<0:NaN:Inf>
                mul r1.x, r0.y, l(2.000000)  // vout<3:NaN:Inf>
                mul r1.y, r0.y, l(2.000000)  // vout<4:NaN:Inf>
                mul r1.z, r0.x, l(2.000000)  // vout<5:NaN:Inf>
                mov r1.w, r1.w  // vout<6:[-2f,1f]>
                
                #line 186
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, v2.x  // vout<7>
                mov o1.xyzw, r1.xyzw  // DrawVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:[-2f,1f]>
                mov o0.xyz, r0.xyzx  // DrawVS<0,1,2>
                mov o2.x, r0.w  // DrawVS<7>
                ret 
                // Approximately 31 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float3 box_vertices[8];            // Offset:    0 Size:   124
                //      = 0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 
                //   float3 box_normals[6];             // Offset:  128 Size:    92 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 
                //   float3 box_normals2[8];            // Offset:  224 Size:   124
                //      = 0xbf13cd3a 0x3f13cd3a 0x3f13cd3a 0x00000000 
                //        0x3f13cd3a 0x3f13cd3a 0x3f13cd3a 0x00000000 
                //        0x3f13cd3a 0xbf13cd3a 0x3f13cd3a 0x00000000 
                //        0xbf13cd3a 0xbf13cd3a 0x3f13cd3a 0x00000000 
                //        0x3f13cd3a 0x3f13cd3a 0xbf13cd3a 0x00000000 
                //        0xbf13cd3a 0x3f13cd3a 0xbf13cd3a 0x00000000 
                //        0xbf13cd3a 0xbf13cd3a 0xbf13cd3a 0x00000000 
                //        0x3f13cd3a 0xbf13cd3a 0xbf13cd3a 
                //   uint box_indices[24];              // Offset:  352 Size:   372 [unused]
                //      = 0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000005 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000005 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000005 
                //   float3 groove[9];                  // Offset:  736 Size:   140 [unused]
                //      = 0x3ec1b3ff 0x3eda223e 0x3ee6a286 0x00000000 
                //        0x3e93db24 0x3eb7a4f2 0x3ed45441 0x00000000 
                //        0x3d1b402d 0x3cf1d748 0x3c217dff 0x00000000 
                //        0xbdd3906b 0xbdd34a45 0xbdb53b81 0x00000000 
                //        0xbd7eab36 0xbd631869 0xbd22854b 0x00000000 
                //        0x3bff0026 0xbc72fe90 0xbd410b7e 0x00000000 
                //        0xbdbf9a57 0xbe006fac 0xbe1c3973 0x00000000 
                //        0xbd6a9443 0xbd4db2a6 0xbd14da4d 0x00000000 
                //        0x3ca6952b 0xbb90d67c 0xbd393682 
                //   float3 beach[9];                   // Offset:  880 Size:   140 [unused]
                //      = 0x3f2f2226 0x3f3161ec 0x3f34faf5 0x00000000 
                //        0x3ea279cc 0x3ebd2755 0x3ee1a152 0x00000000 
                //        0xbe32e99e 0xbe31e273 0xbe29b845 0x00000000 
                //        0xbee63818 0xbed4bed4 0xbeaeedb5 0x00000000 
                //        0xbe2d13a2 0xbe2e63b3 0xbe1c3fc4 0x00000000 
                //        0xbdab9545 0xbdc09ae0 0xbdd26f89 0x00000000 
                //        0xbd02efd4 0xbcaf59c0 0xbc71fa18 0x00000000 
                //        0x3e281f39 0x3e0d0fdb 0x3dceee38 0x00000000 
                //        0x3ebd4bcc 0x3e9e9d30 0x3e4fdd37 
                //   float3 tomb[9];                    // Offset: 1024 Size:   140 [unused]
                //      = 0x3f848023 0x3f42a69e 0x3f351c54 0x00000000 
                //        0x3ee37026 0x3eafa2f7 0x3eae45fc 0x00000000 
                //        0xbe662ca6 0xbe3b3d7a 0xbe2e9c4c 0x00000000 
                //        0x3f3606b8 0x3f0ad548 0x3f0f0d3a 0x00000000 
                //        0x3f249e9c 0x3efe89d8 0x3f0400b4 0x00000000 
                //        0xbdeb8afe 0xbdbfd0f9 0xbdabe2cf 0x00000000 
                //        0xbebf9d87 0xbe8d1af2 0xbe93336c 0x00000000 
                //        0xbe2d9034 0xbe098875 0xbe08bc7b 0x00000000 
                //        0x3f0d30cf 0x3ed82cf2 0x3ed51e90 
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccelW;                    // Offset:    0 Size:    12 [unused]
                //      = 0x00000000 0x00000000 0x00000000 
                //   float2 gQuadTexC[4];               // Offset:   16 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // $Globals                          cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TYPE                     0   x           2     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_Position           0   xyzw        0      POS  float   xyzw
                // m0:V_Depth               0   x           1     NONE  float   x   
                // m0:V_Normal              0    yzw        1     NONE  float    yzw
                // m0:COLOR                 0   xyzw        2     NONE  float   xyzw
                // m0:TYPE                  0   x           3     NONE   uint   x   
                // m0:TEXCOORD              0   xy          4     NONE  float   xy  
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[22], dynamicIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xyzw
                dcl_input v[1][2].x
                dcl_temps 6
                dcl_indexableTemp x0[12], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.x
                dcl_output o1.yzw
                dcl_output o2.xyzw
                dcl_output o3.x
                dcl_output o4.xy
                dcl_maxout 12
                
                #line 336 "D:\Code\honours-project\Code\Voxel Engine\ParticleSystem - VS 2012 (Base Version - Lighting)\FX\Rain.fx"
                mov x0[0].x, l(0)  // indexes<0>
                mov x0[1].x, l(0)  // indexes<1>
                mov x0[2].x, l(0)  // indexes<2>
                mov x0[3].x, l(0)  // indexes<3>
                mov x0[4].x, l(0)  // indexes<4>
                mov x0[5].x, l(0)  // indexes<5>
                mov x0[6].x, l(0)  // indexes<6>
                mov x0[7].x, l(0)  // indexes<7>
                mov x0[8].x, l(0)  // indexes<8>
                mov x0[9].x, l(0)  // indexes<9>
                mov x0[10].x, l(0)  // indexes<10>
                mov x0[11].x, l(0)  // indexes<11>
                
                #line 348
                ge r0.x, v[0][0].y, cb1[0].y
                movc r0.x, r0.x, l(1.000000), l(0)
                ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
                if_nz r0.x
                  lt r0.x, v[0][0].x, cb1[0].x
                  lt r0.y, v[0][0].z, cb1[0].z
                  and r0.z, r0.y, r0.x
                  if_nz r0.z
                
                #line 358
                    mov x0[0].x, l(4)  // indexes<0>
                    mov x0[1].x, l(1)  // indexes<1>
                    mov x0[2].x, l(7)  // indexes<2>
                    mov x0[3].x, l(2)  // indexes<3>
                    mov x0[4].x, l(2)  // indexes<4>
                    mov x0[5].x, l(3)  // indexes<5>
                    mov x0[6].x, l(7)  // indexes<6>
                    mov x0[7].x, l(6)  // indexes<7>
                    mov x0[8].x, l(1)  // indexes<8>
                    mov x0[10].x, l(2)  // indexes<10>
                    mov x0[11].x, l(3)  // indexes<11>
                
                #line 350
                  endif 
                
                #line 363
                  lt r0.z, cb1[0].z, v[0][0].z
                  and r0.x, r0.z, r0.x
                  if_nz r0.x
                
                #line 371
                    mov x0[0].x, l(6)  // indexes<0>
                    mov x0[1].x, l(5)  // indexes<1>
                    mov x0[2].x, l(7)  // indexes<2>
                    mov x0[3].x, l(4)  // indexes<3>
                    mov x0[4].x, l(2)  // indexes<4>
                    mov x0[5].x, l(3)  // indexes<5>
                    mov x0[6].x, l(7)  // indexes<6>
                    mov x0[7].x, l(6)  // indexes<7>
                    mov x0[8].x, l(4)  // indexes<8>
                    mov x0[9].x, l(1)  // indexes<9>
                    mov x0[10].x, l(7)  // indexes<10>
                    mov x0[11].x, l(2)  // indexes<11>
                
                #line 363
                  endif 
                
                #line 376
                  lt r0.x, cb1[0].x, v[0][0].x
                  and r0.y, r0.y, r0.x
                  if_nz r0.y
                
                #line 385
                    mov x0[0].x, l(1)  // indexes<0>
                    mov x0[1].x, l(0)  // indexes<1>
                    mov x0[2].x, l(2)  // indexes<2>
                    mov x0[3].x, l(3)  // indexes<3>
                    mov x0[4].x, l(2)  // indexes<4>
                    mov x0[5].x, l(3)  // indexes<5>
                    mov x0[6].x, l(7)  // indexes<6>
                    mov x0[7].x, l(6)  // indexes<7>
                    mov x0[8].x, l(3)  // indexes<8>
                    mov x0[9].x, l(0)  // indexes<9>
                    mov x0[10].x, l(6)  // indexes<10>
                    mov x0[11].x, l(5)  // indexes<11>
                
                #line 376
                  endif 
                
                #line 389
                  and r0.x, r0.z, r0.x
                  if_nz r0.x
                
                #line 397
                    mov x0[0].x, l(3)  // indexes<0>
                    mov x0[1].x, l(0)  // indexes<1>
                    mov x0[2].x, l(6)  // indexes<2>
                    mov x0[3].x, l(5)  // indexes<3>
                    mov x0[4].x, l(2)  // indexes<4>
                    mov x0[5].x, l(3)  // indexes<5>
                    mov x0[6].x, l(7)  // indexes<6>
                    mov x0[7].x, l(6)  // indexes<7>
                    mov x0[8].x, l(6)  // indexes<8>
                    mov x0[9].x, l(5)  // indexes<9>
                    mov x0[10].x, l(7)  // indexes<10>
                    mov x0[11].x, l(4)  // indexes<11>
                
                #line 389
                  endif 
                
                #line 348
                else 
                
                #line 404
                  lt r0.x, v[0][0].x, cb1[0].x
                  lt r0.y, cb1[0].z, v[0][0].z
                  and r0.x, r0.y, r0.x
                  if_nz r0.x
                
                #line 414
                    mov x0[0].x, l(6)  // indexes<0>
                    mov x0[1].x, l(5)  // indexes<1>
                    mov x0[2].x, l(7)  // indexes<2>
                    mov x0[3].x, l(4)  // indexes<3>
                    mov x0[4].x, l(5)  // indexes<4>
                    mov x0[6].x, l(4)  // indexes<6>
                    mov x0[7].x, l(1)  // indexes<7>
                    mov x0[8].x, l(4)  // indexes<8>
                    mov x0[9].x, l(1)  // indexes<9>
                    mov x0[10].x, l(7)  // indexes<10>
                    mov x0[11].x, l(2)  // indexes<11>
                
                #line 404
                  else 
                
                #line 418
                    lt r0.x, cb1[0].x, v[0][0].x
                    lt r0.y, cb1[0].z, v[0][0].z
                    and r0.y, r0.y, r0.x
                    if_nz r0.y
                
                #line 427
                      mov x0[0].x, l(5)  // indexes<0>
                      mov x0[2].x, l(4)  // indexes<2>
                      mov x0[3].x, l(1)  // indexes<3>
                      mov x0[4].x, l(6)  // indexes<4>
                      mov x0[5].x, l(5)  // indexes<5>
                      mov x0[6].x, l(7)  // indexes<6>
                      mov x0[7].x, l(4)  // indexes<7>
                      mov x0[8].x, l(3)  // indexes<8>
                      mov x0[10].x, l(6)  // indexes<10>
                      mov x0[11].x, l(5)  // indexes<11>
                
                #line 418
                    else 
                
                #line 432
                      lt r0.y, v[0][0].z, cb1[0].z
                      and r0.x, r0.y, r0.x
                      if_nz r0.x
                
                #line 441
                        mov x0[0].x, l(5)  // indexes<0>
                        mov x0[2].x, l(4)  // indexes<2>
                        mov x0[3].x, l(1)  // indexes<3>
                        mov x0[4].x, l(3)  // indexes<4>
                        mov x0[6].x, l(6)  // indexes<6>
                        mov x0[7].x, l(5)  // indexes<7>
                        mov x0[8].x, l(1)  // indexes<8>
                        mov x0[10].x, l(2)  // indexes<10>
                        mov x0[11].x, l(3)  // indexes<11>
                
                #line 432
                      else 
                
                #line 445
                        lt r0.x, v[0][0].x, cb1[0].x
                        and r0.x, r0.y, r0.x
                        if_nz r0.x
                
                #line 454
                          mov x0[0].x, l(5)  // indexes<0>
                          mov x0[2].x, l(4)  // indexes<2>
                          mov x0[3].x, l(1)  // indexes<3>
                          mov x0[4].x, l(1)  // indexes<4>
                          mov x0[6].x, l(2)  // indexes<6>
                          mov x0[7].x, l(3)  // indexes<7>
                          mov x0[8].x, l(4)  // indexes<8>
                          mov x0[9].x, l(1)  // indexes<9>
                          mov x0[10].x, l(7)  // indexes<10>
                          mov x0[11].x, l(2)  // indexes<11>
                
                #line 445
                        endif 
                
                #line 432
                      endif 
                
                #line 418
                    endif 
                
                #line 404
                  endif 
                
                #line 348
                endif 
                
                #line 476
                if_z v[0][2].x
                  mov r0.x, l(8.000000)  // sizeMod<0: 8f>
                else 
                  mov r0.x, l(2.000000)  // sizeMod<0: 2f>
                endif 
                
                #line 501
                mov r0.y, x0[0].x  // indexes<0:[0,6]>
                div r0.x, l(1.000000), r0.x
                mul r1.xyz, r0.xxxx, cb0[r0.y + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.z, r2.xyzw, r2.xyzw
                sqrt r0.z, r0.z  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.y + 14].xyzx  // gout<5,6,7>
                mov r0.y, v[0][2].x  // gout<12>
                mov r3.xy, cb2[1].xyxx  // gout<13,14>
                mov r4.xyzw, v[0][1].xyzw  // gout<8,9,10,11>
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.z  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r3.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[1].x  // indexes<1:[0,5]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 506
                mov r3.zw, cb2[2].xxxy  // gout<13,14>
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r3.zwzz  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[2].x  // indexes<2:[0,7]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 506
                mov r5.xy, cb2[3].xyxx  // gout<13,14>
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r5.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[3].x  // indexes<3:[0,5]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 506
                mov r5.zw, cb2[4].xxxy  // gout<13,14>
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r5.zwzz  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[4].x  // indexes<4:[0,6]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r3.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[5].x  // indexes<5:[0,5]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r3.zwzz  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[6].x  // indexes<6:[0,7]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r5.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[7].x  // indexes<7:[0,6]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r5.zwzz  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[8].x  // indexes<8:[0,6]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r3.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[9].x  // indexes<9:[0,5]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r3.zwzz  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[10].x  // indexes<10:[0,7]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.w, r2.xyzw, r2.xyzw
                sqrt r0.w, r0.w  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.w  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r5.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 501
                mov r0.z, x0[11].x  // indexes<11:[0,5]>
                mul r1.xyz, r0.xxxx, cb0[r0.z + 0].xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // gout<3:NaN:Inf>
                dp4 r0.x, r2.xyzw, r2.xyzw
                sqrt r0.x, r0.x  // gout<4:NaN:Inf>
                mov r1.xyz, cb0[r0.z + 14].xyzx  // gout<5,6,7>
                
                #line 508
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.x, r0.x  // triStream<0>
                mov o1.yzw, r1.xxyz  // triStream<0,0,0>
                mov o2.xyzw, r4.xyzw  // triStream<0,0,0,0>
                mov o3.x, r0.y  // triStream<0>
                mov o4.xy, r5.zwzz  // triStream<0,0>
                emit_stream m0
                
                #line 332
                ret 
                // Approximately 371 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float3 box_vertices[8];            // Offset:    0 Size:   124 [unused]
                //      = 0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 
                //   float3 box_normals[6];             // Offset:  128 Size:    92 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 
                //   float3 box_normals2[8];            // Offset:  224 Size:   124 [unused]
                //      = 0xbf13cd3a 0x3f13cd3a 0x3f13cd3a 0x00000000 
                //        0x3f13cd3a 0x3f13cd3a 0x3f13cd3a 0x00000000 
                //        0x3f13cd3a 0xbf13cd3a 0x3f13cd3a 0x00000000 
                //        0xbf13cd3a 0xbf13cd3a 0x3f13cd3a 0x00000000 
                //        0x3f13cd3a 0x3f13cd3a 0xbf13cd3a 0x00000000 
                //        0xbf13cd3a 0x3f13cd3a 0xbf13cd3a 0x00000000 
                //        0xbf13cd3a 0xbf13cd3a 0xbf13cd3a 0x00000000 
                //        0x3f13cd3a 0xbf13cd3a 0xbf13cd3a 
                //   uint box_indices[24];              // Offset:  352 Size:   372 [unused]
                //      = 0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000005 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000005 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000005 
                //   float3 groove[9];                  // Offset:  736 Size:   140 [unused]
                //      = 0x3ec1b3ff 0x3eda223e 0x3ee6a286 0x00000000 
                //        0x3e93db24 0x3eb7a4f2 0x3ed45441 0x00000000 
                //        0x3d1b402d 0x3cf1d748 0x3c217dff 0x00000000 
                //        0xbdd3906b 0xbdd34a45 0xbdb53b81 0x00000000 
                //        0xbd7eab36 0xbd631869 0xbd22854b 0x00000000 
                //        0x3bff0026 0xbc72fe90 0xbd410b7e 0x00000000 
                //        0xbdbf9a57 0xbe006fac 0xbe1c3973 0x00000000 
                //        0xbd6a9443 0xbd4db2a6 0xbd14da4d 0x00000000 
                //        0x3ca6952b 0xbb90d67c 0xbd393682 
                //   float3 beach[9];                   // Offset:  880 Size:   140 [unused]
                //      = 0x3f2f2226 0x3f3161ec 0x3f34faf5 0x00000000 
                //        0x3ea279cc 0x3ebd2755 0x3ee1a152 0x00000000 
                //        0xbe32e99e 0xbe31e273 0xbe29b845 0x00000000 
                //        0xbee63818 0xbed4bed4 0xbeaeedb5 0x00000000 
                //        0xbe2d13a2 0xbe2e63b3 0xbe1c3fc4 0x00000000 
                //        0xbdab9545 0xbdc09ae0 0xbdd26f89 0x00000000 
                //        0xbd02efd4 0xbcaf59c0 0xbc71fa18 0x00000000 
                //        0x3e281f39 0x3e0d0fdb 0x3dceee38 0x00000000 
                //        0x3ebd4bcc 0x3e9e9d30 0x3e4fdd37 
                //   float3 tomb[9];                    // Offset: 1024 Size:   140
                //      = 0x3f848023 0x3f42a69e 0x3f351c54 0x00000000 
                //        0x3ee37026 0x3eafa2f7 0x3eae45fc 0x00000000 
                //        0xbe662ca6 0xbe3b3d7a 0xbe2e9c4c 0x00000000 
                //        0x3f3606b8 0x3f0ad548 0x3f0f0d3a 0x00000000 
                //        0x3f249e9c 0x3efe89d8 0x3f0400b4 0x00000000 
                //        0xbdeb8afe 0xbdbfd0f9 0xbdabe2cf 0x00000000 
                //        0xbebf9d87 0xbe8d1af2 0xbe93336c 0x00000000 
                //        0xbe2d9034 0xbe098875 0xbe08bc7b 0x00000000 
                //        0x3f0d30cf 0x3ed82cf2 0x3ed51e90 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gTexArray                         texture  float4     2darray    0        1
                // $Globals                          cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float       
                // V_Depth                  0   x           1     NONE  float   x   
                // V_Normal                 0    yzw        1     NONE  float    yzw
                // COLOR                    0   xyzw        2     NONE  float   xyz 
                // TYPE                     0   x           3     NONE   uint   x   
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[73], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.x
                dcl_input_ps linear v1.yzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps constant v3.x
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 549 "D:\Code\honours-project\Code\Voxel Engine\ParticleSystem - VS 2012 (Base Version - Lighting)\FX\Rain.fx"
                udiv null, r0.x, v3.x, l(2)
                utof r0.z, r0.x
                mov r0.xy, v4.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyz, r0.xyzx, t0.xyzw, s0
                mul r0.xyz, r0.xyzx, v2.xyzx
                nop 
                mov r1.xyz, v1.yzwy  // normal<0,1,2>
                
                #line 306
                mov r1.x, r1.x  // x<0>
                mov r1.y, r1.y  // y<0>
                mov r1.z, r1.z  // z<0>
                
                #line 326
                mul r2.xyz, cb0[72].xyzx, l(0.429043, 0.429043, 0.429043, 0.000000)
                mul r0.w, r1.x, r1.x
                mul r1.w, r1.y, r1.y
                mov r1.w, -r1.w
                add r0.w, r0.w, r1.w
                mul r2.xyz, r0.wwww, r2.xyzx
                mul r3.xyz, cb0[70].xyzx, l(0.743125, 0.743125, 0.743125, 0.000000)
                mul r3.xyz, r1.zzzz, r3.xyzx
                mul r3.xyz, r1.zzzz, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[64].xyzx, l(0.886227, 0.886227, 0.886227, 0.000000)
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[70].xyzx, l(0.247708, 0.247708, 0.247708, 0.000000)
                mov r3.xyz, -r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[68].xyzx, l(0.858086, 0.858086, 0.858086, 0.000000)
                mul r3.xyz, r1.xxxx, r3.xyzx
                mul r3.xyz, r1.yyyy, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[71].xyzx, l(0.858086, 0.858086, 0.858086, 0.000000)
                mul r3.xyz, r1.xxxx, r3.xyzx
                mul r3.xyz, r1.zzzz, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[69].xyzx, l(0.858086, 0.858086, 0.858086, 0.000000)
                mul r3.xyz, r1.yyyy, r3.xyzx
                mul r3.xyz, r1.zzzz, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[67].xyzx, l(1.023328, 1.023328, 1.023328, 0.000000)
                mul r3.xyz, r1.xxxx, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, cb0[65].xyzx, l(1.023328, 1.023328, 1.023328, 0.000000)
                mul r1.xyw, r1.yyyy, r3.xyxz
                add r1.xyw, r1.xyxw, r2.xyxz
                mul r2.xyz, cb0[66].xyzx, l(1.023328, 1.023328, 1.023328, 0.000000)
                mul r2.xyz, r1.zzzz, r2.xyzx
                add r1.xyz, r1.xywx, r2.xyzx  // sh_light<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 549
                mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mul r0.xyz, r0.xyzx, r1.xyzx  // outside<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, v1.x  // depth<0>
                
                #line 530
                mul r0.w, r0.w, l(0.005000)
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, l(1.000000)
                mov r0.w, -r0.w
                mul r0.w, r0.w, l(1.442695)
                exp r0.w, r0.w  // f<0:[0f,1f]>
                add r0.xyz, r0.xyzx, l(-0.800000, -0.800000, -0.800000, 0.000000)
                mul r0.xyz, r0.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)  // fog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 551
                mov r0.xyz, r0.xyzx  // at_observer<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, l(1.000000)  // at_observer<3: 1f>
                mov o0.xyzw, r0.xyzw  // DrawPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                ret 
                // Approximately 64 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AdditiveBlending;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

}

